const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');  // חיבור ל-PostgreSQL
const app = express();
const PORT = 5000;

// חיבור למסד נתונים PostgreSQL
const pool = new Pool({
  user: 'postgres',        // שם המשתמש שלך
  host: 'localhost',       // המחשב שבו נמצא PostgreSQL (אם הוא נמצא על אותו מחשב, אז 'localhost')
  database: 'flights',     // שם מסד הנתונים שלך
  password: 'password',    // הסיסמה שלך
  port: 5432,              // ברירת המחדל של PostgreSQL
});

app.use(cors()); // לאפשר בקשות מהפרונטאנד
app.use(express.json()); // לאפשר קריאת גוף בקשה ב-JSON

// חיפוש טיסות לפי פרמטרים
app.get('/api/flights', async (req, res) => {
  const { from, to, maxPrice, departureDate, arrivalDate } = req.query;
  
  let query = 'SELECT * FROM flights WHERE 1=1';
  const queryParams = [];

  if (from) {
    query += ' AND from_location = $1';
    queryParams.push(from);
  }
  if (to) {
    query += ' AND to_location = $2';
    queryParams.push(to);
  }
  if (maxPrice) {
    query += ' AND price <= $3';
    queryParams.push(parseInt(maxPrice)); // ודא שאתה ממיר את maxPrice למספר
  }
  if (departureDate) {
    query += ' AND departure_date = $4';
    queryParams.push(departureDate);
  }
  if (arrivalDate) {
    query += ' AND arrival_date = $5';
    queryParams.push(arrivalDate);
  }

  try {
    const result = await pool.query(query, queryParams);
    res.json(result.rows); // מחזיר את רשימת הטיסות
  } catch (error) {
    console.error('Error querying database:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// קבלת פרטי טיסה לפי מזהה
app.get('/api/flights/:id', async (req, res) => {
  const flightId = parseInt(req.params.id);

  try {
    const result = await pool.query('SELECT * FROM flights WHERE id = $1', [flightId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'Flight not found' });
    }

    res.json(result.rows[0]); // מחזיר את פרטי הטיסה
  } catch (error) {
    console.error('Error querying database:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// יצירת הזמנה חדשה
app.post('/api/reservations', async (req, res) => {
  const { flightId, name, lastName, phone, email } = req.body;

  // ווידוא שכל השדות מלאים
  if (!flightId || !name || !lastName || !phone || !email) {
    return res.status(400).json({ error: 'All fields are required' });
  }

  try {
    const result = await pool.query(
      'INSERT INTO reservations (flight_id, name, last_name, phone, email, status) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
      [flightId, name, lastName, phone, email, 'confirmed']
    );
    const newReservation = result.rows[0]; // ההזמנה החדשה שנוצרה
    res.status(201).json(newReservation); // מחזיר את ההזמנה החדשה
  } catch (error) {
    console.error('Error booking flight:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// מאזין לפורט 5000
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
